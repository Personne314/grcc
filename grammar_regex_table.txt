[LLkTable]
This grammar is LL(1)
Expr
\--> litt :
     \--> Expr -> Union End
\--> ( :
     \--> Expr -> Union End
\--> [ :
     \--> Expr -> Union End

End
\--> $ :
     \--> End -> 
\--> skip :
     \--> End -> skip Union )

Union
\--> litt :
     \--> Union -> Concat Union_1
\--> ( :
     \--> Union -> Concat Union_1
\--> [ :
     \--> Union -> Concat Union_1

Concat
\--> litt :
     \--> Concat -> Atom Concat_1
\--> ( :
     \--> Concat -> Atom Concat_1
\--> [ :
     \--> Concat -> Atom Concat_1

Atom
\--> litt :
     \--> Atom -> Letter Quant
\--> ( :
     \--> Atom -> ( Union ) Quant
\--> [ :
     \--> Atom -> Letter Quant

Quant
\--> $ :
     \--> Quant -> 
\--> litt :
     \--> Quant -> 
\--> skip :
     \--> Quant -> 
\--> | :
     \--> Quant -> 
\--> ( :
     \--> Quant -> 
\--> ) :
     \--> Quant -> 
\--> [ :
     \--> Quant -> 
\--> { :
     \--> Quant -> { int Quant_2
\--> + :
     \--> Quant -> +
\--> * :
     \--> Quant -> *
\--> ? :
     \--> Quant -> ?

Letter
\--> litt :
     \--> Letter -> litt
\--> [ :
     \--> Letter -> [ Letter_1

Class
\--> litt :
     \--> Class -> Elt Class_1

Elt
\--> litt :
     \--> Elt -> litt Elt_1

Union_1
\--> $ :
     \--> Union_1 -> 
\--> skip :
     \--> Union_1 -> 
\--> | :
     \--> Union_1 -> | Union
\--> ) :
     \--> Union_1 -> 

Concat_1
\--> $ :
     \--> Concat_1 -> 
\--> litt :
     \--> Concat_1 -> Concat
\--> skip :
     \--> Concat_1 -> 
\--> | :
     \--> Concat_1 -> 
\--> ( :
     \--> Concat_1 -> Concat
\--> ) :
     \--> Concat_1 -> 
\--> [ :
     \--> Concat_1 -> Concat

Quant_1
\--> int :
     \--> Quant_1 -> int }
\--> } :
     \--> Quant_1 -> }

Quant_2
\--> } :
     \--> Quant_2 -> }
\--> , :
     \--> Quant_2 -> , Quant_1

Letter_1
\--> litt :
     \--> Letter_1 -> Class ]
\--> ^ :
     \--> Letter_1 -> ^ Class ]

Class_1
\--> litt :
     \--> Class_1 -> Class
\--> ] :
     \--> Class_1 -> 

Elt_1
\--> litt :
     \--> Elt_1 -> 
\--> ] :
     \--> Elt_1 -> 
\--> - :
     \--> Elt_1 -> - litt
     